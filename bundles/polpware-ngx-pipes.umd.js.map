{"version":3,"file":"polpware-ngx-pipes.umd.js.map","sources":["ng://@polpware/ngx-pipes/lib/pipes/unroll-array.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/segments.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/fullpath.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/file-size.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/unzip-object.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/parent-dir.pipe.ts","ng://@polpware/ngx-pipes/lib/ngx-pipes.module.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\ninterface IPair {\r\n    first: any;\r\n    second: any;\r\n}\r\n\r\ninterface IUnrollResult {\r\n    pairs: Array<IPair>;\r\n    last: any;\r\n}\r\n\r\n@Pipe({ name: 'unrollArray' })\r\nexport class UnrollArrayPipe implements PipeTransform {\r\n\r\n    transform(value: Array<any>): IUnrollResult {\r\n        const len = value.length;\r\n        const half = Math.floor(len / 2);\r\n        let index = 0;\r\n        const groups = [];\r\n        for (let i = 0; i < half; i++) {\r\n            groups.push({\r\n                first: value[index],\r\n                second: value[index + 1]\r\n            });\r\n            index += 2;\r\n        }\r\n\r\n        let last = null;\r\n\r\n        if (index < len) {\r\n            last = value[index];\r\n        }\r\n\r\n        return {\r\n            pairs: groups,\r\n            last: last\r\n        };\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/*\r\n * Transform a string into an array of segments. \r\n * Usage:\r\n *   path | segments\r\n * Example:\r\n *   {{ '\\test\\tt' |  segments:'\\\\' }}\r\n *   formats to: ['test', 'tt']\r\n*/\r\n@Pipe({ name: 'segments' })\r\nexport class SegmentsPipe implements PipeTransform {\r\n\r\n    transform(path: string, separator: string = '\\\\'): Array<{ value: string, id: number, lastId: number }> {\r\n        if (!path) {\r\n            return [];\r\n        }\r\n\r\n        let ss = path.split(separator);\r\n        ss = ss.filter(x => x.length > 0);\r\n\r\n        const len = ss.length;\r\n        const pp = ss.map((y, index) => {\r\n            return {\r\n                value: y,\r\n                id: index,\r\n                lastId: len - 1\r\n            };\r\n        });\r\n\r\n        return pp;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'shortenFullpath' })\r\nexport class ShortenFullpathPipe implements PipeTransform {\r\n\r\n    private shortJustName(value: string, left: number, right: number): string {\r\n\r\n        if (value.length <= left + right) {\r\n            return value;\r\n        }\r\n\r\n        const index = value.lastIndexOf('.');\r\n        if (index === -1) {\r\n            // no extension\r\n            return value.substring(0, left) + '...' + value.substring(value.length - right);\r\n        }\r\n\r\n        // has extension\r\n        const ext = value.substring(index);\r\n        if (ext.length >= left + right) {\r\n            return '...' + ext;\r\n        }\r\n\r\n        return value.substring(0, left + right - ext.length) + '...' + ext;\r\n    }\r\n\r\n    transform(value: string, maxlen: number): string {\r\n        if (value.length <= maxlen) {\r\n            return value;\r\n        }\r\n\r\n        const leftLen = Math.trunc(maxlen / 2);\r\n        const rightLen = maxlen - leftLen;\r\n\r\n        const index = value.lastIndexOf('\\\\');\r\n        if (index === -1) {\r\n            return this.shortJustName(value, leftLen, rightLen);\r\n        } else {\r\n            const r = this.shortJustName(value.substring(index + 1), leftLen, rightLen);\r\n            return '...\\\\' + r;\r\n        }\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/*\r\n * Convert bytes into largest possible unit.\r\n * Takes an precision argument that defaults to 2.\r\n * Usage:\r\n *   bytes | fileSize:precision\r\n * Example:\r\n *   {{ 1024 |  fileSize}}\r\n *   formats to: 1 KB\r\n*/\r\n@Pipe({ name: 'fileSize' })\r\nexport class FileSizePipe implements PipeTransform {\r\n\r\n    private units = [\r\n        'bytes',\r\n        'KB',\r\n        'MB',\r\n        'GB',\r\n        'TB',\r\n        'PB'\r\n    ];\r\n\r\n    transform(bytes: number = 0, precision: number = 2): string {\r\n        if (isNaN(parseFloat(String(bytes))) || !isFinite(bytes)) {\r\n            return '?';\r\n        }\r\n\r\n        let unit = 0;\r\n\r\n        while (bytes >= 1024) {\r\n            bytes /= 1024;\r\n            unit++;\r\n        }\r\n\r\n        return bytes.toFixed(+ precision) + ' ' + this.units[unit];\r\n    }\r\n}\r\n","import { PipeTransform, Pipe } from '@angular/core';\r\n\r\n@Pipe({ name: 'unzipObject' })\r\nexport class UnzipObjectPipe implements PipeTransform {\r\n    transform(value: Object, ...args: string[]): any[] {\r\n        const keys = [];\r\n        for (const key in value) {\r\n            if (value.hasOwnProperty(key)) {\r\n                keys.push({ key: key, value: value[key] });\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'parentDir' })\r\nexport class ParentDirPipe implements PipeTransform {\r\n\r\n    // Remove the last part of a path.\r\n    transform(value: string): string {\r\n\r\n        if (!value) {\r\n            return '';\r\n        }\r\n\r\n        const index = value.lastIndexOf('\\\\');\r\n        if (index === -1) {\r\n            return '';\r\n        } else {\r\n            return value.substring(0, index);\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UnrollArrayPipe } from \"./pipes/unroll-array.pipe\";\nimport { SegmentsPipe } from \"./pipes/segments.pipe\";\nimport { ShortenFullpathPipe } from \"./pipes/fullpath.pipe\";\nimport { FileSizePipe } from \"./pipes/file-size.pipe\";\nimport { UnzipObjectPipe } from \"./pipes/unzip-object.pipe\";\nimport { ParentDirPipe } from \"./pipes/parent-dir.pipe\";\n\n\n@NgModule({\n    declarations: [\n        UnrollArrayPipe,\n        SegmentsPipe,\n        ShortenFullpathPipe,\n        FileSizePipe,\n        UnzipObjectPipe,\n        ParentDirPipe\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        UnrollArrayPipe,\n        SegmentsPipe,\n        ShortenFullpathPipe,\n        FileSizePipe,\n        UnzipObjectPipe,\n        ParentDirPipe\n    ]\n})\nexport class PolpwareNgxPipesModule { }\n"],"names":["Pipe","NgModule","CommonModule"],"mappings":"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"}
