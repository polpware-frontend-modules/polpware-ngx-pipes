{"version":3,"file":"polpware-ngx-pipes.umd.js","sources":["ng://@polpware/ngx-pipes/lib/pipes/file-size.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/fullpath.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/parent-dir.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/safe-dom.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/segments.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/unroll-array.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/unzip-object.pipe.ts","ng://@polpware/ngx-pipes/lib/ngx-pipes.module.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/*\r\n * Convert bytes into largest possible unit.\r\n * Takes an precision argument that defaults to 2.\r\n * Usage:\r\n *   bytes | fileSize:precision\r\n * Example:\r\n *   {{ 1024 |  fileSize}}\r\n *   formats to: 1 KB\r\n*/\r\n@Pipe({ name: 'fileSize' })\r\nexport class FileSizePipe implements PipeTransform {\r\n\r\n    private units = [\r\n        'bytes',\r\n        'KB',\r\n        'MB',\r\n        'GB',\r\n        'TB',\r\n        'PB'\r\n    ];\r\n\r\n    transform(bytes: number = 0, precision: number = 2): string {\r\n        if (isNaN(parseFloat(String(bytes))) || !isFinite(bytes)) {\r\n            return '?';\r\n        }\r\n\r\n        let unit = 0;\r\n\r\n        while (bytes >= 1024) {\r\n            bytes /= 1024;\r\n            unit++;\r\n        }\r\n\r\n        return bytes.toFixed(+ precision) + ' ' + this.units[unit];\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'shortenFullpath' })\r\nexport class ShortenFullpathPipe implements PipeTransform {\r\n\r\n    private shortJustName(value: string, left: number, right: number): string {\r\n\r\n        if (value.length <= left + right) {\r\n            return value;\r\n        }\r\n\r\n        const index = value.lastIndexOf('.');\r\n        if (index === -1) {\r\n            // no extension\r\n            return value.substring(0, left) + '...' + value.substring(value.length - right);\r\n        }\r\n\r\n        // has extension\r\n        const ext = value.substring(index);\r\n        if (ext.length >= left + right) {\r\n            return '...' + ext;\r\n        }\r\n\r\n        return value.substring(0, left + right - ext.length) + '...' + ext;\r\n    }\r\n\r\n    transform(value: string, maxlen: number): string {\r\n        if (value.length <= maxlen) {\r\n            return value;\r\n        }\r\n\r\n        const leftLen = Math.trunc(maxlen / 2);\r\n        const rightLen = maxlen - leftLen;\r\n\r\n        const index = value.lastIndexOf('\\\\');\r\n        if (index === -1) {\r\n            return this.shortJustName(value, leftLen, rightLen);\r\n        } else {\r\n            const r = this.shortJustName(value.substring(index + 1), leftLen, rightLen);\r\n            return '...\\\\' + r;\r\n        }\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'parentDir' })\r\nexport class ParentDirPipe implements PipeTransform {\r\n\r\n    // Remove the last part of a path.\r\n    transform(value: string): string {\r\n\r\n        if (!value) {\r\n            return '';\r\n        }\r\n\r\n        const index = value.lastIndexOf('\\\\');\r\n        if (index === -1) {\r\n            return '';\r\n        } else {\r\n            return value.substring(0, index);\r\n        }\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeStyle, SafeScript, SafeUrl, SafeResourceUrl } from '@angular/platform-browser';\n\n@Pipe({\n    name: 'safeDom'\n})\nexport class SafeDomPipe implements PipeTransform {\n\n    constructor(protected sanitizer: DomSanitizer) { }\n\n    public transform(value: any, type: string): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case 'html': return this.sanitizer.bypassSecurityTrustHtml(value);\n            case 'style': return this.sanitizer.bypassSecurityTrustStyle(value);\n            case 'script': return this.sanitizer.bypassSecurityTrustScript(value);\n            case 'url': return this.sanitizer.bypassSecurityTrustUrl(value);\n            case 'resourceUrl': return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            default: throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/*\r\n * Transform a string into an array of segments. \r\n * Usage:\r\n *   path | segments\r\n * Example:\r\n *   {{ '\\test\\tt' |  segments:'\\\\' }}\r\n *   formats to: ['test', 'tt']\r\n*/\r\n@Pipe({ name: 'segments' })\r\nexport class SegmentsPipe implements PipeTransform {\r\n\r\n    transform(path: string, separator: string = '\\\\'): Array<{ value: string, id: number, lastId: number }> {\r\n        if (!path) {\r\n            return [];\r\n        }\r\n\r\n        let ss = path.split(separator);\r\n        ss = ss.filter(x => x.length > 0);\r\n\r\n        const len = ss.length;\r\n        const pp = ss.map((y, index) => {\r\n            return {\r\n                value: y,\r\n                id: index,\r\n                lastId: len - 1\r\n            };\r\n        });\r\n\r\n        return pp;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\ninterface IPair {\r\n    first: any;\r\n    second: any;\r\n}\r\n\r\ninterface IUnrollResult {\r\n    pairs: Array<IPair>;\r\n    last: any;\r\n}\r\n\r\n@Pipe({ name: 'unrollArray' })\r\nexport class UnrollArrayPipe implements PipeTransform {\r\n\r\n    transform(value: Array<any>): IUnrollResult {\r\n        const len = value.length;\r\n        const half = Math.floor(len / 2);\r\n        let index = 0;\r\n        const groups = [];\r\n        for (let i = 0; i < half; i++) {\r\n            groups.push({\r\n                first: value[index],\r\n                second: value[index + 1]\r\n            });\r\n            index += 2;\r\n        }\r\n\r\n        let last = null;\r\n\r\n        if (index < len) {\r\n            last = value[index];\r\n        }\r\n\r\n        return {\r\n            pairs: groups,\r\n            last: last\r\n        };\r\n    }\r\n}\r\n","import { PipeTransform, Pipe } from '@angular/core';\r\n\r\n@Pipe({ name: 'unzipObject' })\r\nexport class UnzipObjectPipe implements PipeTransform {\r\n    transform(value: Object, ...args: string[]): any[] {\r\n        const keys = [];\r\n        for (const key in value) {\r\n            if (value.hasOwnProperty(key)) {\r\n                keys.push({ key: key, value: value[key] });\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UnrollArrayPipe } from \"./pipes/unroll-array.pipe\";\nimport { SegmentsPipe } from \"./pipes/segments.pipe\";\nimport { ShortenFullpathPipe } from \"./pipes/fullpath.pipe\";\nimport { FileSizePipe } from \"./pipes/file-size.pipe\";\nimport { UnzipObjectPipe } from \"./pipes/unzip-object.pipe\";\nimport { ParentDirPipe } from \"./pipes/parent-dir.pipe\";\nimport { SafeDomPipe } from './pipes/safe-dom.pipe';\n\n\n@NgModule({\n    declarations: [\n        UnrollArrayPipe,\n        SegmentsPipe,\n        ShortenFullpathPipe,\n        FileSizePipe,\n        UnzipObjectPipe,\n        ParentDirPipe,\n        SafeDomPipe\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        UnrollArrayPipe,\n        SegmentsPipe,\n        ShortenFullpathPipe,\n        FileSizePipe,\n        UnzipObjectPipe,\n        ParentDirPipe,\n        SafeDomPipe\n    ]\n})\nexport class PolpwareNgxPipesModule { }\n"],"names":["Pipe","CommonModule","NgModule"],"mappings":"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"}