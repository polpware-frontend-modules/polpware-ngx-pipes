{"version":3,"sources":["ng://@polpware/ngx-pipes/lib/pipes/unroll-array.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/segments.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/fullpath.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/file-size.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/unzip-object.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/parent-dir.pipe.ts","ng://@polpware/ngx-pipes/lib/ngx-pipes.module.ts"],"names":["UnrollArrayPipe","prototype","transform","value","len","length","half","Math","floor","index","groups","i","push","first","second","last","pairs","Pipe","args","name","SegmentsPipe","path","separator","ss","split","filter","x","map","y","id","lastId","ShortenFullpathPipe","shortJustName","left","right","lastIndexOf","substring","ext","maxlen","leftLen","trunc","rightLen","this","FileSizePipe","units","bytes","precision","isNaN","parseFloat","String","isFinite","unit","toFixed","UnzipObjectPipe","_i","arguments","keys","key","hasOwnProperty","ParentDirPipe","PolpwareNgxPipesModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"0WAAA,IAAAA,EAAA,WAYA,SAAAA,KA2BA,OAxBIA,EAAAC,UAAAC,UAAA,SAAUC,GAKN,QAJMC,EAAMD,EAAME,OACZC,EAAOC,KAAKC,MAAMJ,EAAM,GAC1BK,EAAQ,EACNC,EAAS,GACNC,EAAI,EAAGA,EAAIL,EAAMK,IACtBD,EAAOE,KAAK,CACRC,MAAOV,EAAMM,GACbK,OAAQX,EAAMM,EAAQ,KAE1BA,GAAS,MAGTM,EAAO,KAMX,OAJIN,EAAQL,IACRW,EAAOZ,EAAMM,IAGV,CACHO,MAAON,EACPK,KAAMA,wBAxBjBE,EAAAA,KAAIC,KAAA,CAAC,CAAEC,KAAM,kBA2BdnB,EAvCA,GCUAoB,EAAA,WAAA,SAAAA,KAsBA,OAnBIA,EAAAnB,UAAAC,UAAA,SAAUmB,EAAcC,GACpB,QADoB,IAAAA,IAAAA,EAAA,OACfD,EACD,MAAO,OAGPE,EAAKF,EAAKG,MAAMF,GAGdlB,GAFNmB,EAAKA,EAAGE,OAAO,SAAAC,GAAK,OAAW,EAAXA,EAAErB,UAEPA,OASf,OARWkB,EAAGI,IAAI,SAACC,EAAGnB,GAClB,MAAO,CACHN,MAAOyB,EACPC,GAAIpB,EACJqB,OAAQ1B,EAAM,0BAhB7Ba,EAAAA,KAAIC,KAAA,CAAC,CAAEC,KAAM,eAsBdC,EAtBA,GCVAW,EAAA,WAEA,SAAAA,KAwCA,OArCYA,EAAA9B,UAAA+B,cAAR,SAAsB7B,EAAe8B,EAAcC,GAE/C,GAAI/B,EAAME,QAAU4B,EAAOC,EACvB,OAAO/B,MAGLM,EAAQN,EAAMgC,YAAY,KAChC,IAAe,IAAX1B,EAEA,OAAON,EAAMiC,UAAU,EAAGH,GAAQ,MAAQ9B,EAAMiC,UAAUjC,EAAME,OAAS6B,OAIvEG,EAAMlC,EAAMiC,UAAU3B,GAC5B,OAAI4B,EAAIhC,QAAU4B,EAAOC,EACd,MAAQG,EAGZlC,EAAMiC,UAAU,EAAGH,EAAOC,EAAQG,EAAIhC,QAAU,MAAQgC,GAGnEN,EAAA9B,UAAAC,UAAA,SAAUC,EAAemC,GACrB,GAAInC,EAAME,QAAUiC,EAChB,OAAOnC,MAGLoC,EAAUhC,KAAKiC,MAAMF,EAAS,GAC9BG,EAAWH,EAASC,EAEpB9B,EAAQN,EAAMgC,YAAY,MAChC,OAAe,IAAX1B,EACOiC,KAAKV,cAAc7B,EAAOoC,EAASE,GAGnC,QADGC,KAAKV,cAAc7B,EAAMiC,UAAU3B,EAAQ,GAAI8B,EAASE,wBApC7ExB,EAAAA,KAAIC,KAAA,CAAC,CAAEC,KAAM,sBAwCdY,EA1CA,GCWAY,EAAA,WAAA,SAAAA,IAGYD,KAAAE,MAAQ,CACZ,QACA,KACA,KACA,KACA,KACA,MAiBR,OAdID,EAAA1C,UAAAC,UAAA,SAAU2C,EAAmBC,GACzB,QADM,IAAAD,IAAAA,EAAA,QAAmB,IAAAC,IAAAA,EAAA,GACrBC,MAAMC,WAAWC,OAAOJ,OAAaK,SAASL,GAC9C,MAAO,IAKX,QAFIM,EAAO,EAEK,MAATN,GACHA,GAAS,KACTM,IAGJ,OAAON,EAAMO,SAAUN,GAAa,IAAMJ,KAAKE,MAAMO,wBAxB5DlC,EAAAA,KAAIC,KAAA,CAAC,CAAEC,KAAM,eA0BdwB,EA1BA,GCXAU,EAAA,WAEA,SAAAA,KAWA,OATIA,EAAApD,UAAAC,UAAA,SAAUC,OAAe,IAAAe,EAAA,GAAAoC,EAAA,EAAAA,EAAAC,UAAAlD,OAAAiD,IAAApC,EAAAoC,EAAA,GAAAC,UAAAD,OACfE,EAAO,GACb,IAAK,IAAMC,KAAOtD,EACVA,EAAMuD,eAAeD,IACrBD,EAAK5C,KAAK,CAAE6C,IAAKA,EAAKtD,MAAOA,EAAMsD,KAG3C,OAAOD,uBATdvC,EAAAA,KAAIC,KAAA,CAAC,CAAEC,KAAM,kBAWdkC,EAbA,GCAAM,EAAA,WAEA,SAAAA,KAiBA,OAbIA,EAAA1D,UAAAC,UAAA,SAAUC,GAEN,IAAKA,EACD,MAAO,OAGLM,EAAQN,EAAMgC,YAAY,MAChC,OAAe,IAAX1B,EACO,GAEAN,EAAMiC,UAAU,EAAG3B,wBAdrCQ,EAAAA,KAAIC,KAAA,CAAC,CAAEC,KAAM,gBAiBdwC,EAnBA,GCAAC,EAAA,WAWA,SAAAA,KAqBsC,2BArBrCC,EAAAA,SAAQ3C,KAAA,CAAC,CACN4C,aAAc,CACV9D,EACAoB,EACAW,EACAY,EACAU,EACAM,GAEJI,QAAS,CACLC,EAAAA,cAEJC,QAAS,CACLjE,EACAoB,EACAW,EACAY,EACAU,EACAM,OAG8BC,EAhCtC","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\ninterface IPair {\r\n    first: any;\r\n    second: any;\r\n}\r\n\r\ninterface IUnrollResult {\r\n    pairs: Array<IPair>;\r\n    last: any;\r\n}\r\n\r\n@Pipe({ name: 'unrollArray' })\r\nexport class UnrollArrayPipe implements PipeTransform {\r\n\r\n    transform(value: Array<any>): IUnrollResult {\r\n        const len = value.length;\r\n        const half = Math.floor(len / 2);\r\n        let index = 0;\r\n        const groups = [];\r\n        for (let i = 0; i < half; i++) {\r\n            groups.push({\r\n                first: value[index],\r\n                second: value[index + 1]\r\n            });\r\n            index += 2;\r\n        }\r\n\r\n        let last = null;\r\n\r\n        if (index < len) {\r\n            last = value[index];\r\n        }\r\n\r\n        return {\r\n            pairs: groups,\r\n            last: last\r\n        };\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/*\r\n * Transform a string into an array of segments. \r\n * Usage:\r\n *   path | segments\r\n * Example:\r\n *   {{ '\\test\\tt' |  segments:'\\\\' }}\r\n *   formats to: ['test', 'tt']\r\n*/\r\n@Pipe({ name: 'segments' })\r\nexport class SegmentsPipe implements PipeTransform {\r\n\r\n    transform(path: string, separator: string = '\\\\'): Array<{ value: string, id: number, lastId: number }> {\r\n        if (!path) {\r\n            return [];\r\n        }\r\n\r\n        let ss = path.split(separator);\r\n        ss = ss.filter(x => x.length > 0);\r\n\r\n        const len = ss.length;\r\n        const pp = ss.map((y, index) => {\r\n            return {\r\n                value: y,\r\n                id: index,\r\n                lastId: len - 1\r\n            };\r\n        });\r\n\r\n        return pp;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'shortenFullpath' })\r\nexport class ShortenFullpathPipe implements PipeTransform {\r\n\r\n    private shortJustName(value: string, left: number, right: number): string {\r\n\r\n        if (value.length <= left + right) {\r\n            return value;\r\n        }\r\n\r\n        const index = value.lastIndexOf('.');\r\n        if (index === -1) {\r\n            // no extension\r\n            return value.substring(0, left) + '...' + value.substring(value.length - right);\r\n        }\r\n\r\n        // has extension\r\n        const ext = value.substring(index);\r\n        if (ext.length >= left + right) {\r\n            return '...' + ext;\r\n        }\r\n\r\n        return value.substring(0, left + right - ext.length) + '...' + ext;\r\n    }\r\n\r\n    transform(value: string, maxlen: number): string {\r\n        if (value.length <= maxlen) {\r\n            return value;\r\n        }\r\n\r\n        const leftLen = Math.trunc(maxlen / 2);\r\n        const rightLen = maxlen - leftLen;\r\n\r\n        const index = value.lastIndexOf('\\\\');\r\n        if (index === -1) {\r\n            return this.shortJustName(value, leftLen, rightLen);\r\n        } else {\r\n            const r = this.shortJustName(value.substring(index + 1), leftLen, rightLen);\r\n            return '...\\\\' + r;\r\n        }\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/*\r\n * Convert bytes into largest possible unit.\r\n * Takes an precision argument that defaults to 2.\r\n * Usage:\r\n *   bytes | fileSize:precision\r\n * Example:\r\n *   {{ 1024 |  fileSize}}\r\n *   formats to: 1 KB\r\n*/\r\n@Pipe({ name: 'fileSize' })\r\nexport class FileSizePipe implements PipeTransform {\r\n\r\n    private units = [\r\n        'bytes',\r\n        'KB',\r\n        'MB',\r\n        'GB',\r\n        'TB',\r\n        'PB'\r\n    ];\r\n\r\n    transform(bytes: number = 0, precision: number = 2): string {\r\n        if (isNaN(parseFloat(String(bytes))) || !isFinite(bytes)) {\r\n            return '?';\r\n        }\r\n\r\n        let unit = 0;\r\n\r\n        while (bytes >= 1024) {\r\n            bytes /= 1024;\r\n            unit++;\r\n        }\r\n\r\n        return bytes.toFixed(+ precision) + ' ' + this.units[unit];\r\n    }\r\n}\r\n","import { PipeTransform, Pipe } from '@angular/core';\r\n\r\n@Pipe({ name: 'unzipObject' })\r\nexport class UnzipObjectPipe implements PipeTransform {\r\n    transform(value: Object, ...args: string[]): any[] {\r\n        const keys = [];\r\n        for (const key in value) {\r\n            if (value.hasOwnProperty(key)) {\r\n                keys.push({ key: key, value: value[key] });\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'parentDir' })\r\nexport class ParentDirPipe implements PipeTransform {\r\n\r\n    // Remove the last part of a path.\r\n    transform(value: string): string {\r\n\r\n        if (!value) {\r\n            return '';\r\n        }\r\n\r\n        const index = value.lastIndexOf('\\\\');\r\n        if (index === -1) {\r\n            return '';\r\n        } else {\r\n            return value.substring(0, index);\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UnrollArrayPipe } from \"./pipes/unroll-array.pipe\";\nimport { SegmentsPipe } from \"./pipes/segments.pipe\";\nimport { ShortenFullpathPipe } from \"./pipes/fullpath.pipe\";\nimport { FileSizePipe } from \"./pipes/file-size.pipe\";\nimport { UnzipObjectPipe } from \"./pipes/unzip-object.pipe\";\nimport { ParentDirPipe } from \"./pipes/parent-dir.pipe\";\n\n\n@NgModule({\n    declarations: [\n        UnrollArrayPipe,\n        SegmentsPipe,\n        ShortenFullpathPipe,\n        FileSizePipe,\n        UnzipObjectPipe,\n        ParentDirPipe\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        UnrollArrayPipe,\n        SegmentsPipe,\n        ShortenFullpathPipe,\n        FileSizePipe,\n        UnzipObjectPipe,\n        ParentDirPipe\n    ]\n})\nexport class PolpwareNgxPipesModule { }\n"]}