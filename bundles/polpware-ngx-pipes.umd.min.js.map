{"version":3,"sources":["ng://@polpware/ngx-pipes/lib/pipes/file-size.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/fullpath.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/parent-dir.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/safe-dom.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/segments.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/unroll-array.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/unzip-object.pipe.ts","ng://@polpware/ngx-pipes/lib/ngx-pipes.module.ts"],"names":["FileSizePipe","this","units","prototype","transform","bytes","precision","isNaN","parseFloat","String","isFinite","unit","toFixed","pure","ShortenFullpathPipe","shortJustName","value","left","right","length","index","lastIndexOf","substring","ext","maxlen","leftLen","Math","trunc","rightLen","ParentDirPipe","SafeDomPipe","sanitizer","type","bypassSecurityTrustHtml","bypassSecurityTrustStyle","bypassSecurityTrustScript","bypassSecurityTrustUrl","bypassSecurityTrustResourceUrl","Error","core","ɵɵdirectiveInject","platformBrowser","DomSanitizer","SegmentsPipe","path","separator","ss","split","len","filter","x","map","y","id","lastId","UnrollArrayPipe","half","floor","groups","i","push","first","second","last","pairs","UnzipObjectPipe","args","_i","arguments","keys","key","hasOwnProperty","PolpwareNgxPipesModule","imports","CommonModule","declarations","exports"],"mappings":"8dAWA,SAAAA,IAGYC,KAAAC,MAAQ,CACZ,QACA,KACA,KACA,KACA,KACA,aAGJF,EAAAG,UAAAC,UAAA,SAAUC,EAAmBC,GACzB,QADM,IAAAD,IAAAA,EAAA,QAAmB,IAAAC,IAAAA,EAAA,GACrBC,MAAMC,WAAWC,OAAOJ,OAAaK,SAASL,GAC9C,MAAO,IAKX,IAFA,IAAIM,EAAO,EAEJN,GAAS,MACZA,GAAS,KACTM,IAGJ,OAAON,EAAMO,SAAUN,GAAa,IAAML,KAAKC,MAAMS,qCAvBhDX,iDAAAA,EAAYa,MAAA,sBCVzB,SAAAC,YAGYA,EAAAX,UAAAY,cAAR,SAAsBC,EAAeC,EAAcC,GAE/C,GAAIF,EAAMG,QAAUF,EAAOC,EACvB,OAAOF,EAGX,IAAMI,EAAQJ,EAAMK,YAAY,KAChC,IAAe,IAAXD,EAEA,OAAOJ,EAAMM,UAAU,EAAGL,GAAQ,MAAQD,EAAMM,UAAUN,EAAMG,OAASD,GAI7E,IAAMK,EAAMP,EAAMM,UAAUF,GAC5B,OAAIG,EAAIJ,QAAUF,EAAOC,EACd,MAAQK,EAGZP,EAAMM,UAAU,EAAGL,EAAOC,EAAQK,EAAIJ,QAAU,MAAQI,GAGnET,EAAAX,UAAAC,UAAA,SAAUY,EAAeQ,GACrB,GAAIR,EAAMG,QAAUK,EAChB,OAAOR,EAGX,IAAMS,EAAUC,KAAKC,MAAMH,EAAS,GAC9BI,EAAWJ,EAASC,EAEpBL,EAAQJ,EAAMK,YAAY,MAChC,OAAe,IAAXD,EACOnB,KAAKc,cAAcC,EAAOS,EAASG,GAGnC,QADG3B,KAAKc,cAAcC,EAAMM,UAAUF,EAAQ,GAAIK,EAASG,qCAnCjEd,wDAAAA,EAAmBD,MAAA,sBCDhC,SAAAgB,YAIIA,EAAA1B,UAAAC,UAAA,SAAUY,GAEN,IAAKA,EACD,MAAO,GAGX,IAAMI,EAAQJ,EAAMK,YAAY,MAChC,OAAe,IAAXD,EACO,GAEAJ,EAAMM,UAAU,EAAGF,qCAbzBS,kDAAAA,EAAahB,MAAA,sBCKtB,SAAAiB,EAAsBC,GAAA9B,KAAA8B,UAAAA,SAEfD,EAAA3B,UAAAC,UAAP,SAAiBY,EAAYgB,GACzB,OAAQA,GACJ,IAAK,OAAQ,OAAO/B,KAAK8B,UAAUE,wBAAwBjB,GAC3D,IAAK,QAAS,OAAOf,KAAK8B,UAAUG,yBAAyBlB,GAC7D,IAAK,SAAU,OAAOf,KAAK8B,UAAUI,0BAA0BnB,GAC/D,IAAK,MAAO,OAAOf,KAAK8B,UAAUK,uBAAuBpB,GACzD,IAAK,cAAe,OAAOf,KAAK8B,UAAUM,+BAA+BrB,GACzE,QAAS,MAAM,IAAIsB,MAAM,gCAAgCN,sCAXxDF,GAAWS,EAAAC,kBAAAC,EAAAC,4DAAXZ,EAAWjB,MAAA,sBCIxB,SAAA8B,YAGIA,EAAAxC,UAAAC,UAAA,SAAUwC,EAAcC,GACpB,QADoB,IAAAA,IAAAA,EAAA,OACfD,EACD,MAAO,GAGX,IAAIE,EAAKF,EAAKG,MAAMF,GAGdG,GAFNF,EAAKA,EAAGG,QAAO,SAAAC,GAAK,OAAAA,EAAE/B,OAAS,MAEhBA,OASf,OARW2B,EAAGK,KAAI,SAACC,EAAGhC,GAClB,MAAO,CACHJ,MAAOoC,EACPC,GAAIjC,EACJkC,OAAQN,EAAM,wCAfjBL,iDAAAA,EAAY9B,MAAA,sBCCzB,SAAA0C,YAGIA,EAAApD,UAAAC,UAAA,SAAUY,GAKN,IAJA,IAAMgC,EAAMhC,EAAMG,OACZqC,EAAO9B,KAAK+B,MAAMT,EAAM,GAC1B5B,EAAQ,EACNsC,EAAS,GACNC,EAAI,EAAGA,EAAIH,EAAMG,IACtBD,EAAOE,KAAK,CACRC,MAAO7C,EAAMI,GACb0C,OAAQ9C,EAAMI,EAAQ,KAE1BA,GAAS,EAGb,IAAI2C,EAAO,KAMX,OAJI3C,EAAQ4B,IACRe,EAAO/C,EAAMI,IAGV,CACH4C,MAAON,EACPK,KAAMA,qCAvBLR,oDAAAA,EAAe1C,MAAA,sBCX5B,SAAAoD,YAEIA,EAAA9D,UAAAC,UAAA,SAAUY,OAAe,IAAAkD,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAjD,OAAAgD,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,GACrB,IAAME,EAAO,GACb,IAAK,IAAMC,KAAOtD,EACVA,EAAMuD,eAAeD,IACrBD,EAAKT,KAAK,CAAEU,IAAKA,EAAKtD,MAAOA,EAAMsD,KAG3C,OAAOD,oCARFJ,oDAAAA,EAAepD,MAAA,sBCS5B,SAAA2D,4CAuBaA,iEAAAA,IAAsBC,QAAA,CAbtB,CACLC,EAAAA,uFAYKF,EAAsB,CAAAG,aAAA,CArB3BpB,EACAZ,EACA7B,EACAd,EACAiE,EACApC,EACAC,GAAW2C,QAAA,CAGXC,EAAAA,cAAYE,QAAA,CAGZrB,EACAZ,EACA7B,EACAd,EACAiE,EACApC,EACAC","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/*\r\n * Convert bytes into largest possible unit.\r\n * Takes an precision argument that defaults to 2.\r\n * Usage:\r\n *   bytes | fileSize:precision\r\n * Example:\r\n *   {{ 1024 |  fileSize}}\r\n *   formats to: 1 KB\r\n*/\r\n@Pipe({ name: 'fileSize' })\r\nexport class FileSizePipe implements PipeTransform {\r\n\r\n    private units = [\r\n        'bytes',\r\n        'KB',\r\n        'MB',\r\n        'GB',\r\n        'TB',\r\n        'PB'\r\n    ];\r\n\r\n    transform(bytes: number = 0, precision: number = 2): string {\r\n        if (isNaN(parseFloat(String(bytes))) || !isFinite(bytes)) {\r\n            return '?';\r\n        }\r\n\r\n        let unit = 0;\r\n\r\n        while (bytes >= 1024) {\r\n            bytes /= 1024;\r\n            unit++;\r\n        }\r\n\r\n        return bytes.toFixed(+ precision) + ' ' + this.units[unit];\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'shortenFullpath' })\r\nexport class ShortenFullpathPipe implements PipeTransform {\r\n\r\n    private shortJustName(value: string, left: number, right: number): string {\r\n\r\n        if (value.length <= left + right) {\r\n            return value;\r\n        }\r\n\r\n        const index = value.lastIndexOf('.');\r\n        if (index === -1) {\r\n            // no extension\r\n            return value.substring(0, left) + '...' + value.substring(value.length - right);\r\n        }\r\n\r\n        // has extension\r\n        const ext = value.substring(index);\r\n        if (ext.length >= left + right) {\r\n            return '...' + ext;\r\n        }\r\n\r\n        return value.substring(0, left + right - ext.length) + '...' + ext;\r\n    }\r\n\r\n    transform(value: string, maxlen: number): string {\r\n        if (value.length <= maxlen) {\r\n            return value;\r\n        }\r\n\r\n        const leftLen = Math.trunc(maxlen / 2);\r\n        const rightLen = maxlen - leftLen;\r\n\r\n        const index = value.lastIndexOf('\\\\');\r\n        if (index === -1) {\r\n            return this.shortJustName(value, leftLen, rightLen);\r\n        } else {\r\n            const r = this.shortJustName(value.substring(index + 1), leftLen, rightLen);\r\n            return '...\\\\' + r;\r\n        }\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'parentDir' })\r\nexport class ParentDirPipe implements PipeTransform {\r\n\r\n    // Remove the last part of a path.\r\n    transform(value: string): string {\r\n\r\n        if (!value) {\r\n            return '';\r\n        }\r\n\r\n        const index = value.lastIndexOf('\\\\');\r\n        if (index === -1) {\r\n            return '';\r\n        } else {\r\n            return value.substring(0, index);\r\n        }\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeStyle, SafeScript, SafeUrl, SafeResourceUrl } from '@angular/platform-browser';\n\n@Pipe({\n    name: 'safeDom'\n})\nexport class SafeDomPipe implements PipeTransform {\n\n    constructor(protected sanitizer: DomSanitizer) { }\n\n    public transform(value: any, type: string): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case 'html': return this.sanitizer.bypassSecurityTrustHtml(value);\n            case 'style': return this.sanitizer.bypassSecurityTrustStyle(value);\n            case 'script': return this.sanitizer.bypassSecurityTrustScript(value);\n            case 'url': return this.sanitizer.bypassSecurityTrustUrl(value);\n            case 'resourceUrl': return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            default: throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/*\r\n * Transform a string into an array of segments. \r\n * Usage:\r\n *   path | segments\r\n * Example:\r\n *   {{ '\\test\\tt' |  segments:'\\\\' }}\r\n *   formats to: ['test', 'tt']\r\n*/\r\n@Pipe({ name: 'segments' })\r\nexport class SegmentsPipe implements PipeTransform {\r\n\r\n    transform(path: string, separator: string = '\\\\'): Array<{ value: string, id: number, lastId: number }> {\r\n        if (!path) {\r\n            return [];\r\n        }\r\n\r\n        let ss = path.split(separator);\r\n        ss = ss.filter(x => x.length > 0);\r\n\r\n        const len = ss.length;\r\n        const pp = ss.map((y, index) => {\r\n            return {\r\n                value: y,\r\n                id: index,\r\n                lastId: len - 1\r\n            };\r\n        });\r\n\r\n        return pp;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\ninterface IPair {\r\n    first: any;\r\n    second: any;\r\n}\r\n\r\ninterface IUnrollResult {\r\n    pairs: Array<IPair>;\r\n    last: any;\r\n}\r\n\r\n@Pipe({ name: 'unrollArray' })\r\nexport class UnrollArrayPipe implements PipeTransform {\r\n\r\n    transform(value: Array<any>): IUnrollResult {\r\n        const len = value.length;\r\n        const half = Math.floor(len / 2);\r\n        let index = 0;\r\n        const groups = [];\r\n        for (let i = 0; i < half; i++) {\r\n            groups.push({\r\n                first: value[index],\r\n                second: value[index + 1]\r\n            });\r\n            index += 2;\r\n        }\r\n\r\n        let last = null;\r\n\r\n        if (index < len) {\r\n            last = value[index];\r\n        }\r\n\r\n        return {\r\n            pairs: groups,\r\n            last: last\r\n        };\r\n    }\r\n}\r\n","import { PipeTransform, Pipe } from '@angular/core';\r\n\r\n@Pipe({ name: 'unzipObject' })\r\nexport class UnzipObjectPipe implements PipeTransform {\r\n    transform(value: Object, ...args: string[]): any[] {\r\n        const keys = [];\r\n        for (const key in value) {\r\n            if (value.hasOwnProperty(key)) {\r\n                keys.push({ key: key, value: value[key] });\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UnrollArrayPipe } from \"./pipes/unroll-array.pipe\";\nimport { SegmentsPipe } from \"./pipes/segments.pipe\";\nimport { ShortenFullpathPipe } from \"./pipes/fullpath.pipe\";\nimport { FileSizePipe } from \"./pipes/file-size.pipe\";\nimport { UnzipObjectPipe } from \"./pipes/unzip-object.pipe\";\nimport { ParentDirPipe } from \"./pipes/parent-dir.pipe\";\nimport { SafeDomPipe } from './pipes/safe-dom.pipe';\n\n\n@NgModule({\n    declarations: [\n        UnrollArrayPipe,\n        SegmentsPipe,\n        ShortenFullpathPipe,\n        FileSizePipe,\n        UnzipObjectPipe,\n        ParentDirPipe,\n        SafeDomPipe\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        UnrollArrayPipe,\n        SegmentsPipe,\n        ShortenFullpathPipe,\n        FileSizePipe,\n        UnzipObjectPipe,\n        ParentDirPipe,\n        SafeDomPipe\n    ]\n})\nexport class PolpwareNgxPipesModule { }\n"]}