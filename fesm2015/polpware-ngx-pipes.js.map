{"version":3,"file":"polpware-ngx-pipes.js.map","sources":["ng://@polpware/ngx-pipes/lib/pipes/unroll-array.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/segments.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/fullpath.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/file-size.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/unzip-object.pipe.ts","ng://@polpware/ngx-pipes/lib/pipes/parent-dir.pipe.ts","ng://@polpware/ngx-pipes/lib/ngx-pipes.module.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\ninterface IPair {\r\n    first: any;\r\n    second: any;\r\n}\r\n\r\ninterface IUnrollResult {\r\n    pairs: Array<IPair>;\r\n    last: any;\r\n}\r\n\r\n@Pipe({ name: 'unrollArray' })\r\nexport class UnrollArrayPipe implements PipeTransform {\r\n\r\n    transform(value: Array<any>): IUnrollResult {\r\n        const len = value.length;\r\n        const half = Math.floor(len / 2);\r\n        let index = 0;\r\n        const groups = [];\r\n        for (let i = 0; i < half; i++) {\r\n            groups.push({\r\n                first: value[index],\r\n                second: value[index + 1]\r\n            });\r\n            index += 2;\r\n        }\r\n\r\n        let last = null;\r\n\r\n        if (index < len) {\r\n            last = value[index];\r\n        }\r\n\r\n        return {\r\n            pairs: groups,\r\n            last: last\r\n        };\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/*\r\n * Transform a string into an array of segments. \r\n * Usage:\r\n *   path | segments\r\n * Example:\r\n *   {{ '\\test\\tt' |  segments:'\\\\' }}\r\n *   formats to: ['test', 'tt']\r\n*/\r\n@Pipe({ name: 'segments' })\r\nexport class SegmentsPipe implements PipeTransform {\r\n\r\n    transform(path: string, separator: string = '\\\\'): Array<{ value: string, id: number, lastId: number }> {\r\n        if (!path) {\r\n            return [];\r\n        }\r\n\r\n        let ss = path.split(separator);\r\n        ss = ss.filter(x => x.length > 0);\r\n\r\n        const len = ss.length;\r\n        const pp = ss.map((y, index) => {\r\n            return {\r\n                value: y,\r\n                id: index,\r\n                lastId: len - 1\r\n            };\r\n        });\r\n\r\n        return pp;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'shortenFullpath' })\r\nexport class ShortenFullpathPipe implements PipeTransform {\r\n\r\n    private shortJustName(value: string, left: number, right: number): string {\r\n\r\n        if (value.length <= left + right) {\r\n            return value;\r\n        }\r\n\r\n        const index = value.lastIndexOf('.');\r\n        if (index === -1) {\r\n            // no extension\r\n            return value.substring(0, left) + '...' + value.substring(value.length - right);\r\n        }\r\n\r\n        // has extension\r\n        const ext = value.substring(index);\r\n        if (ext.length >= left + right) {\r\n            return '...' + ext;\r\n        }\r\n\r\n        return value.substring(0, left + right - ext.length) + '...' + ext;\r\n    }\r\n\r\n    transform(value: string, maxlen: number): string {\r\n        if (value.length <= maxlen) {\r\n            return value;\r\n        }\r\n\r\n        const leftLen = Math.trunc(maxlen / 2);\r\n        const rightLen = maxlen - leftLen;\r\n\r\n        const index = value.lastIndexOf('\\\\');\r\n        if (index === -1) {\r\n            return this.shortJustName(value, leftLen, rightLen);\r\n        } else {\r\n            const r = this.shortJustName(value.substring(index + 1), leftLen, rightLen);\r\n            return '...\\\\' + r;\r\n        }\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/*\r\n * Convert bytes into largest possible unit.\r\n * Takes an precision argument that defaults to 2.\r\n * Usage:\r\n *   bytes | fileSize:precision\r\n * Example:\r\n *   {{ 1024 |  fileSize}}\r\n *   formats to: 1 KB\r\n*/\r\n@Pipe({ name: 'fileSize' })\r\nexport class FileSizePipe implements PipeTransform {\r\n\r\n    private units = [\r\n        'bytes',\r\n        'KB',\r\n        'MB',\r\n        'GB',\r\n        'TB',\r\n        'PB'\r\n    ];\r\n\r\n    transform(bytes: number = 0, precision: number = 2): string {\r\n        if (isNaN(parseFloat(String(bytes))) || !isFinite(bytes)) {\r\n            return '?';\r\n        }\r\n\r\n        let unit = 0;\r\n\r\n        while (bytes >= 1024) {\r\n            bytes /= 1024;\r\n            unit++;\r\n        }\r\n\r\n        return bytes.toFixed(+ precision) + ' ' + this.units[unit];\r\n    }\r\n}\r\n","import { PipeTransform, Pipe } from '@angular/core';\r\n\r\n@Pipe({ name: 'unzipObject' })\r\nexport class UnzipObjectPipe implements PipeTransform {\r\n    transform(value: Object, ...args: string[]): any[] {\r\n        const keys = [];\r\n        for (const key in value) {\r\n            if (value.hasOwnProperty(key)) {\r\n                keys.push({ key: key, value: value[key] });\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'parentDir' })\r\nexport class ParentDirPipe implements PipeTransform {\r\n\r\n    // Remove the last part of a path.\r\n    transform(value: string): string {\r\n\r\n        if (!value) {\r\n            return '';\r\n        }\r\n\r\n        const index = value.lastIndexOf('\\\\');\r\n        if (index === -1) {\r\n            return '';\r\n        } else {\r\n            return value.substring(0, index);\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UnrollArrayPipe } from \"./pipes/unroll-array.pipe\";\nimport { SegmentsPipe } from \"./pipes/segments.pipe\";\nimport { ShortenFullpathPipe } from \"./pipes/fullpath.pipe\";\nimport { FileSizePipe } from \"./pipes/file-size.pipe\";\nimport { UnzipObjectPipe } from \"./pipes/unzip-object.pipe\";\nimport { ParentDirPipe } from \"./pipes/parent-dir.pipe\";\n\n\n@NgModule({\n    declarations: [\n        UnrollArrayPipe,\n        SegmentsPipe,\n        ShortenFullpathPipe,\n        FileSizePipe,\n        UnzipObjectPipe,\n        ParentDirPipe\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        UnrollArrayPipe,\n        SegmentsPipe,\n        ShortenFullpathPipe,\n        FileSizePipe,\n        UnzipObjectPipe,\n        ParentDirPipe\n    ]\n})\nexport class PolpwareNgxPipesModule { }\n"],"names":[],"mappings":"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"}
