{"version":3,"file":"polpware-ngx-pipes.mjs","sources":["../../../../projects/polpware/ngx-pipes/src/lib/pipes/file-size.pipe.ts","../../../../projects/polpware/ngx-pipes/src/lib/pipes/fullpath.pipe.ts","../../../../projects/polpware/ngx-pipes/src/lib/pipes/parent-dir.pipe.ts","../../../../projects/polpware/ngx-pipes/src/lib/pipes/safe-dom.pipe.ts","../../../../projects/polpware/ngx-pipes/src/lib/pipes/segments.pipe.ts","../../../../projects/polpware/ngx-pipes/src/lib/pipes/unroll-array.pipe.ts","../../../../projects/polpware/ngx-pipes/src/lib/pipes/unzip-object.pipe.ts","../../../../projects/polpware/ngx-pipes/src/lib/ngx-pipes.module.ts","../../../../projects/polpware/ngx-pipes/src/public_api.ts","../../../../projects/polpware/ngx-pipes/src/polpware-ngx-pipes.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/*\r\n * Convert bytes into largest possible unit.\r\n * Takes an precision argument that defaults to 2.\r\n * Usage:\r\n *   bytes | fileSize:precision\r\n * Example:\r\n *   {{ 1024 |  fileSize}}\r\n *   formats to: 1 KB\r\n*/\r\n@Pipe({ name: 'fileSize' })\r\nexport class FileSizePipe implements PipeTransform {\r\n\r\n    private units = [\r\n        'bytes',\r\n        'KB',\r\n        'MB',\r\n        'GB',\r\n        'TB',\r\n        'PB'\r\n    ];\r\n\r\n    transform(bytes: number = 0, precision: number = 2): string {\r\n        if (isNaN(parseFloat(String(bytes))) || !isFinite(bytes)) {\r\n            return '?';\r\n        }\r\n\r\n        let unit = 0;\r\n\r\n        while (bytes >= 1024) {\r\n            bytes /= 1024;\r\n            unit++;\r\n        }\r\n\r\n        return bytes.toFixed(+ precision) + ' ' + this.units[unit];\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'shortenFullpath' })\r\nexport class ShortenFullpathPipe implements PipeTransform {\r\n\r\n    private shortJustName(value: string, left: number, right: number): string {\r\n\r\n        if (value.length <= left + right) {\r\n            return value;\r\n        }\r\n\r\n        const index = value.lastIndexOf('.');\r\n        if (index === -1) {\r\n            // no extension\r\n            return value.substring(0, left) + '...' + value.substring(value.length - right);\r\n        }\r\n\r\n        // has extension\r\n        const ext = value.substring(index);\r\n        if (ext.length >= left + right) {\r\n            return '...' + ext;\r\n        }\r\n\r\n        return value.substring(0, left + right - ext.length) + '...' + ext;\r\n    }\r\n\r\n    transform(value: string, maxlen: number): string {\r\n        if (value.length <= maxlen) {\r\n            return value;\r\n        }\r\n\r\n        const leftLen = Math.trunc(maxlen / 2);\r\n        const rightLen = maxlen - leftLen;\r\n\r\n        const index = value.lastIndexOf('\\\\');\r\n        if (index === -1) {\r\n            return this.shortJustName(value, leftLen, rightLen);\r\n        } else {\r\n            const r = this.shortJustName(value.substring(index + 1), leftLen, rightLen);\r\n            return '...\\\\' + r;\r\n        }\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'parentDir' })\r\nexport class ParentDirPipe implements PipeTransform {\r\n\r\n    // Remove the last part of a path.\r\n    transform(value: string): string {\r\n\r\n        if (!value) {\r\n            return '';\r\n        }\r\n\r\n        const index = value.lastIndexOf('\\\\');\r\n        if (index === -1) {\r\n            return '';\r\n        } else {\r\n            return value.substring(0, index);\r\n        }\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeStyle, SafeScript, SafeUrl, SafeResourceUrl } from '@angular/platform-browser';\n\n@Pipe({\n    name: 'safeDom'\n})\nexport class SafeDomPipe implements PipeTransform {\n\n    constructor(protected sanitizer: DomSanitizer) { }\n\n    public transform(value: any, type: string): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case 'html': return this.sanitizer.bypassSecurityTrustHtml(value);\n            case 'style': return this.sanitizer.bypassSecurityTrustStyle(value);\n            case 'script': return this.sanitizer.bypassSecurityTrustScript(value);\n            case 'url': return this.sanitizer.bypassSecurityTrustUrl(value);\n            case 'resourceUrl': return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            default: throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/*\r\n * Transform a string into an array of segments. \r\n * Usage:\r\n *   path | segments\r\n * Example:\r\n *   {{ '\\test\\tt' |  segments:'\\\\' }}\r\n *   formats to: ['test', 'tt']\r\n*/\r\n@Pipe({ name: 'segments' })\r\nexport class SegmentsPipe implements PipeTransform {\r\n\r\n    transform(path: string, separator: string = '\\\\'): Array<{ value: string, id: number, lastId: number }> {\r\n        if (!path) {\r\n            return [];\r\n        }\r\n\r\n        let ss = path.split(separator);\r\n        ss = ss.filter(x => x.length > 0);\r\n\r\n        const len = ss.length;\r\n        const pp = ss.map((y, index) => {\r\n            return {\r\n                value: y,\r\n                id: index,\r\n                lastId: len - 1\r\n            };\r\n        });\r\n\r\n        return pp;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\ninterface IPair {\r\n    first: any;\r\n    second: any;\r\n}\r\n\r\ninterface IUnrollResult {\r\n    pairs: Array<IPair>;\r\n    last: any;\r\n}\r\n\r\n@Pipe({ name: 'unrollArray' })\r\nexport class UnrollArrayPipe implements PipeTransform {\r\n\r\n    transform(value: Array<any>): IUnrollResult {\r\n        const len = value.length;\r\n        const half = Math.floor(len / 2);\r\n        let index = 0;\r\n        const groups = [];\r\n        for (let i = 0; i < half; i++) {\r\n            groups.push({\r\n                first: value[index],\r\n                second: value[index + 1]\r\n            });\r\n            index += 2;\r\n        }\r\n\r\n        let last = null;\r\n\r\n        if (index < len) {\r\n            last = value[index];\r\n        }\r\n\r\n        return {\r\n            pairs: groups,\r\n            last: last\r\n        };\r\n    }\r\n}\r\n","import { PipeTransform, Pipe } from '@angular/core';\r\n\r\n@Pipe({ name: 'unzipObject' })\r\nexport class UnzipObjectPipe implements PipeTransform {\r\n    transform(value: Object, ...args: string[]): any[] {\r\n        const keys = [];\r\n        for (const key in value) {\r\n            if (value.hasOwnProperty(key)) {\r\n                keys.push({ key: key, value: value[key] });\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { UnrollArrayPipe } from \"./pipes/unroll-array.pipe\";\nimport { SegmentsPipe } from \"./pipes/segments.pipe\";\nimport { ShortenFullpathPipe } from \"./pipes/fullpath.pipe\";\nimport { FileSizePipe } from \"./pipes/file-size.pipe\";\nimport { UnzipObjectPipe } from \"./pipes/unzip-object.pipe\";\nimport { ParentDirPipe } from \"./pipes/parent-dir.pipe\";\nimport { SafeDomPipe } from './pipes/safe-dom.pipe';\n\n\n@NgModule({\n    declarations: [\n        UnrollArrayPipe,\n        SegmentsPipe,\n        ShortenFullpathPipe,\n        FileSizePipe,\n        UnzipObjectPipe,\n        ParentDirPipe,\n        SafeDomPipe\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        UnrollArrayPipe,\n        SegmentsPipe,\n        ShortenFullpathPipe,\n        FileSizePipe,\n        UnzipObjectPipe,\n        ParentDirPipe,\n        SafeDomPipe\n    ]\n})\nexport class PolpwareNgxPipesModule { }\n","/*\n * Public API Surface of ngx-pipes\n */\n\nexport * from \"./lib/pipes/file-size.pipe\";\nexport * from \"./lib/pipes/fullpath.pipe\";\nexport * from \"./lib/pipes/parent-dir.pipe\";\nexport * from \"./lib/pipes/safe-dom.pipe\";\nexport * from \"./lib/pipes/segments.pipe\";\nexport * from \"./lib/pipes/unroll-array.pipe\";\nexport * from \"./lib/pipes/unzip-object.pipe\";\nexport * from \"./lib/ngx-pipes.module\";\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}